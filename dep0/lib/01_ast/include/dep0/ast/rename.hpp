/*
 * Copyright Raffaele Rossi 2023 - 2025.
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 */
/**
 * @file
 * @brief Functions used to perform renaming during @ref alpha_equivalence.
 */
#pragma once

#include "dep0/ast/ast.hpp"

namespace dep0::ast {

/**
 * @brief Replace all occurrences of a variable name to a new "fresh" name inside Pi-Types and Lambda-Abstractions.
 *
 * "Fresh" means that the new name does not occur in any of the sub-expressions where renaming will take place.
 * Note, however, that the new name might not be "globally unique" with respect to the entire AST.
 * A fresh name is generated by setting @ref dep0::ast::expr_t::var_t::idx to a new value.
 * 
 * @param var The old variable name to replace.
 * @param begin
 *      The begin iterator to the function arguments of the Pi-Type or Lambda-Abstraction.
 *      All occurrences of `var` inside the types and the names of the function arguments will be replaced.
 * @param end The end iterator of said arguments.
 * @param ret_type All occurrences inside the return type of said Pi-Type or Lambda-Abstraction will be replaced.
 * @param body Pointer to the body of the Lambda-Abstraction or `nullptr` if renamning inside a Pi-Type.
 *
 * @remarks For the purpose of alpha-equivalence,
 * it would theoretically suffice to rename only the free occurrences of `var` but
 * there is no harm in replacing all occurrences, including those bound to "shadowing" arguments.
 * 
 * @return The new variable name generated
 * 
 * @see
 *   - @ref alpha_equivalence
 *   - @ref dep0::ast::max_index()
 */
template <Properties P>
typename expr_t<P>::var_t rename(
    typename expr_t<P>::var_t const& var,
    typename std::vector<func_arg_t<P>>::iterator begin,
    typename std::vector<func_arg_t<P>>::iterator end,
    expr_t<P>& ret_type,
    body_t<P>* body);

/** @brief Overload to perform renaming inside a Sigma-Type. */
template <Properties P>
typename expr_t<P>::var_t rename(
    typename expr_t<P>::var_t const& var,
    typename std::vector<func_arg_t<P>>::iterator begin,
    typename std::vector<func_arg_t<P>>::iterator end);

} // namespace dep0::ast

#include "dep0/ast/rename_impl.hpp"
