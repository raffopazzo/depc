#pragma once

#include "private/context.hpp"

#include "dep0/typecheck/ast.hpp"

#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/Value.h>

namespace dep0::llvmgen {

/**
 * Generates the value of the unit type.
 */
llvm::Value* gen_val_unit(global_ctx_t&);

/**
 * Generates an LLVM value for the given type and number.
 */
llvm::Value* gen_val(llvm::IntegerType*, boost::multiprecision::cpp_int const&);

/**
 * Generates an LLVM value for the given expression.
 *
 * @param dest
 *      If this parameter is not nullptr, this function will emit appropriate IR instructions
 *      to store/memcpy/memset the generated value at the runtime location pointed by this LLVM value,
 *      which must therefore be of an appropriate pointer type.
 *
 * @return The value generated or `dest` if it was not nullptr.
 */
llvm::Value* gen_val(
    global_ctx_t&,
    local_ctx_t const&,
    llvm::IRBuilder<>&,
    typecheck::expr_t const&,
    llvm::Value* dest);

/**
 * Generates LLVM instructions to store/memcpy/memset an LLVM value at some runtime location.
 * The exact sequence of LLVM instructions generated by this function depends on the type of the value to store.
 * For example, for an `i32_t` a simple `store` is enough but for an `array_t(i32_t, n)` a `memcpy` might be necessary.
 *
 * @param value The input LLVM value to store or copy.
 * @param dest  An LLVM value that represents the runtime location where the value must be stored or copied.
 *
 * @return If `dest` is nullptr returns `value`, otherwise returns `dest`.
 */
llvm::Value* maybe_gen_store(
    global_ctx_t&,
    local_ctx_t const&,
    llvm::IRBuilder<>&,
    llvm::Value* const value,
    llvm::Value* const dest,
    typecheck::expr_t const& type);

/**
 * Generates an LLVM value from a runtime function call corresponding to the given application expression.
 *
 * @param dest
 *      If this parameter is not nullptr, this function will emit appropriate IR instructions
 *      to store/memcpy/memset the result of the function call at the runtime location pointed by
 *      this LLVM value, which must therefore be of an appropriate pointer type.
 *
 * @return The generated LLVM value or `dest` if it was not nullptr.
 */
llvm::Value* gen_func_call(
    global_ctx_t&,
    local_ctx_t const&,
    llvm::IRBuilder<>&,
    typecheck::expr_t::app_t const&,
    llvm::Value* dest);

} // namespace dep0::llvmgen
