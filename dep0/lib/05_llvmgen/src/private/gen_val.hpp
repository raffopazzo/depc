/*
 * Copyright Raffaele Rossi 2023 - 2025.
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 */
/**
 * @file
 * @brief Set of functions to generate LLVM values, for example constants and function calls.
 */
#pragma once

#include "private/context.hpp"
#include "private/gen_alloca.hpp"

#include "dep0/typecheck/ast.hpp"

#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/Value.h>

namespace dep0::llvmgen {

/** @brief When generating a value, its category carries information about its intended usage. */
enum class value_category_t
{
    /**
     * @brief Temporary values are used inside a function or expression and do not escape the enclosing function.
     * @details If possible, the compiler is free to allocate memory on the stack.
     */
    temporary,

    /**
     * @brief Result values are returned as the result of the enclosing function.
     * @details Memory stored inside such values must always be allocated on the heap.
     */
    result
};

/** @brief Generates the value of the unit type. */
llvm::Value* gen_val_unit(global_ctx_t&);

/** @brief Generates an LLVM value for the given type and number. */
llvm::Value* gen_val(llvm::IntegerType*, boost::multiprecision::cpp_int const&);

/**
 * @brief Generates an LLVM value for the given expression.
 *
 * If the generated value is not trivially destructible it is stored in the list of destructors of the local context.
 *
 * @param dest If not `nullptr`, constructs the new value in-place at the run-time location referred to by `dest`.
 *
 * @return The new LLVM value, which might be be exactly `dest`; for example when generating an array in-place.
 *
 * @see @ref `is_trivially_destructible()`
 */
llvm::Value* gen_val(
    global_ctx_t&,
    local_ctx_t&,
    llvm::IRBuilder<>&,
    typecheck::expr_t const&,
    value_category_t,
    llvm::Value* dest);

inline llvm::Value* gen_temporary_val(
    global_ctx_t& global,
    local_ctx_t& local,
    llvm::IRBuilder<>& builder,
    typecheck::expr_t const& expr)
{
    return gen_val(global, local, builder, expr, value_category_t::temporary, nullptr);
}

/**
 * @brief Generates LLVM instructions to `store/memcpy/memset` an LLVM value at some run-time location.
 *
 * The exact sequence of LLVM instructions generated by this function depends on the type of the value to store.
 * For example, for an `i32_t` a simple `store` is enough but for an `array_t(i32_t, n)` a `memcpy` might be necessary.
 *
 * @param value The input LLVM value to store or copy.
 * @param dest The run-time location where the value must be stored/copied, which therefore must be of pointer type.
 */
void gen_store(
    global_ctx_t&,
    local_ctx_t&,
    llvm::IRBuilder<>&,
    value_category_t,
    llvm::Value* value,
    llvm::Value* dest,
    typecheck::expr_t const& type);

/**
 * @brief Generates an LLVM value from a run-time function call corresponding to the given application expression.
 *
 * If the return value of the function call is not trivially destructible,
 * the result value and its type are stored in the list of destructors of the local context.
 *
 * @param dest If not `nullptr`, constructs the new value in-place at the run-time location referred to by `dest`.
 *
 * @return The new LLVM value, which might be be exactly `dest`; for example when generating an array in-place.
 *
 * @see @ref `is_trivially_destructible()`
 */
llvm::Value* gen_func_call(
    global_ctx_t&,
    local_ctx_t&,
    llvm::IRBuilder<>&,
    typecheck::expr_t::app_t const&,
    value_category_t,
    llvm::Value* dest);

} // namespace dep0::llvmgen
