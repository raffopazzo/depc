typedef int = signed 32 bit integer;

func id(typename t, t x) -> t
{
    return x;
}

func f(i32_t x) -> i32_t
{
    return id(i32_t, x);
}

func g(u32_t x) -> u32_t
{
    return id(u32_t, x);
}

func h(int x) -> int
{
    return id(int, x);
}

func foo() -> i32_t
{
    return f(-1);
}

func bar() -> u32_t
{
    return g(1);
}

func baz() -> int
{
    return h(-1);
}

func apply(
    typename t,
    (t) -> t f,
    t x
) -> t
{
    return f(x);
}

func apply_f() -> i32_t
{
    return apply(i32_t, f, -1);
}

func apply_g() -> u32_t
{
    return apply(u32_t, g, 1);
}

func apply_h() -> int
{
    return apply(int, h, 1);
}

func apply_0((i32_t) -> i32_t apply) -> i32_t
{
    // this `apply` shadows the top-level one,
    // so this is just an indirect call via the local argument
    return apply(0);
}

func discard_v1(typename t, (typename u, u) -> u f, t x) -> t
{
    return x;
}

func discard_v2(typename t, (typename t, t) -> t f, t x) -> t
{
    return x;
}

func discard_id_v1() -> u32_t
{
    return discard_v1(u32_t, id, 0);
}

func discard_id_v2() -> u32_t
{
    return discard_v2(u32_t, id, 0);
}

func int_to_bool(int x) -> bool_t { return true; }

func multi_f(typename t, (typename u, u) -> u f, t x, t y, t z) -> t
{
    if (f(bool_t, true))
        return x;
    else if (int_to_bool(f(int, 0)))
        return y;
    else
        return f(t, z);
}

func multi_f_i32() -> i32_t
{
    return multi_f(i32_t, id, 0, 1, 2);
}

func get_id() -> (typename t, t) -> t { return id; }

func apply_transform_v1(typename t, t x, (typename t, t) -> t f) -> t { return f(t, x); }
func apply_transform_v2(typename t, t x, (typename u, u) -> u f) -> t { return f(t, x); }

func apply_id_v1(i32_t x) -> i32_t { return apply_transform_v1(i32_t, x, get_id()); }
func apply_id_v2(i32_t x) -> i32_t { return apply_transform_v2(i32_t, x, get_id()); }
