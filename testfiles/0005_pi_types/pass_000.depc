typedef int = signed 32 bit integer from ... to ...;

auto id(typename t, t x) -> t
{
    return x;
}

i32_t f(i32_t x)
{
    return id(i32_t, x);
}

u32_t g(u32_t x)
{
    return id(u32_t, x);
}

int h(int x)
{
    return id(int, x);
}

i32_t foo()
{
    return f(-1);
}

u32_t bar()
{
    return g(1);
}

int baz()
{
    return h(-1);
}

auto apply(
    typename t,
    (t) -> t f,
    t x
) -> t
{
    return f(x);
}

i32_t apply_f()
{
    return apply(i32_t, f, -1);
}

u32_t apply_g()
{
    return apply(u32_t, g, 1);
}

int apply_h()
{
    return apply(int, h, 1);
}

i32_t apply_0((i32_t) -> i32_t apply)
{
    // this `apply` shadows the top-level one,
    // so this is just an indirect call via the local argument
    return apply(0);
}

auto discard_v1(typename t, (typename u, u) -> u f, t x) -> t
{
    return x;
}

auto discard_v2(typename t, (typename t, t) -> t f, t x) -> t
{
    return x;
}

u32_t discard_id_v1()
{
    return discard_v1(u32_t, id, 0);
}

u32_t discard_id_v2()
{
    return discard_v2(u32_t, id, 0);
}

bool int_to_bool(int x) { return true; }

auto multi_f(typename t, (typename u, u) -> u f, t x, t y, t z) -> t
{
    if (f(bool, true))
        return x;
    else if (int_to_bool(f(int, 0)))
        return y;
    else
        return f(t, z);
}

i32_t multi_f_i32()
{
    return multi_f(i32_t, id, 0, 1, 2);
}

auto get_id() -> (typename t, t) -> t { return id; }

auto apply_transform_v1(typename t, t x, (typename t, t) -> t f) -> t { return f(t, x); }
auto apply_transform_v2(typename t, t x, (typename u, u) -> u f) -> t { return f(t, x); }

i32_t apply_id_v1(i32_t x) { return apply_transform_v1(i32_t, x, get_id()); }
i32_t apply_id_v2(i32_t x) { return apply_transform_v2(i32_t, x, get_id()); }
