/*
 * Copyright Raffaele Rossi 2025.
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
 */
func make_vec() -> (u64_t n, array_t(i32_t, n)) { return {1, {2}}; }
func use_vec((u64_t n, array_t(i32_t, n))) -> i32_t { return 0; }

func f0() -> i32_t
{
    use_vec(make_vec());
    return 0;
}

extern new_vec() -> (u64_t n, array_t(i32_t, n));

func f1(0 true_t(false)) mutable -> i32_t
{
    if (use_vec(new_vec()) == 0)
        impossible;
    else
        return 0;
}

func f2(0 true_t(false)) mutable -> i32_t
{
    if (use_vec(new_vec()) == 0)
        return 0;
    else
        impossible;
}
